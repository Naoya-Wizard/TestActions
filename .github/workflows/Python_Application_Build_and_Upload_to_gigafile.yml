name: Python Application Build and Upload to Drive

on:
  push:
    branches:
      - main

jobs:
  build-and-upload:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Check for Python file changes
      run: |
        $diffOutput = git diff --name-only ${{ github.event.before }} ${{ github.sha }}
        $changed_files = $diffOutput -split '\r?\n'
        Write-Output "Changed files: $changed_files"
        $py_files_changed = $false
        foreach ($file in $changed_files) {
          if ($file -match "\.py$" -and $file -ne "upload_to_drive.py") {
            $py_files_changed = $true
            break
          }
        }
        if (-not $py_files_changed) {
          Write-Output "No relevant Python files have changed, stopping the job."
          exit 1
        }
        echo "changed_files=$(($changed_files -join ' '))" | Out-File -Append -FilePath $env:GITHUB_ENV
      shell: pwsh

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11.1'

    - name: Install Dependencies from requirements.txt
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        $skip_files = @("upload_to_gigafile.py", "smbc_botv26.py", "send_to_slack.py")
        $changed_files = $env:changed_files -split ' '
        foreach ($file in $changed_files) {
          if ($file -match "\.py$" -and $skip_files -notcontains $file) {
            Write-Output "Processing file: $file"
            pyinstaller $file --onefile --noconsole
          } elseif ($skip_files -contains $file) {
            Write-Output "Skipping file: $file"
          }
        }
      shell: pwsh

    - name: List generated EXE files
      run: ls dist
    
    - name: Find compiled EXE
      run: |
        $exePath = (Get-ChildItem -Path . -Filter *.exe -Recurse).FullName
        if (-not $exePath) {
          Write-Output "No EXE file found, stopping the job."
          exit 1
        }
        Write-Output "EXE path: $exePath"
  
    - name: Collect EXE file names from dist folder
      id: collect_exe
      run: |
        $exePaths = (Get-ChildItem -Path ./dist -Filter *.exe -Recurse).FullName
        $exeFileNames = @()
        foreach ($exePath in $exePaths) {
          $exeFileName = [System.IO.Path]::GetFileName($exePath)
          $exeFileNames += $exeFileName
        }
        echo "::set-output name=EXE_FILE_NAMES::$(($exeFileNames -join ', '))"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install gigafile

    - name: Upload files to Gigafile
      run: |
        $exeFileNames = $Env:EXE_FILE_NAMES -split ', '
        $filePaths = $exeFileNames | ForEach-Object { "./dist/" + $_ }
        $joinedPaths = $filePaths -join " "
        python upload_to_gigafile.py $joinedPaths
      env:
        EXE_FILE_NAMES: ${{ steps.collect_exe.outputs.EXE_FILE_NAMES }}
      shell: pwsh

    - name: Install Slack SDK
      run: pip install slack_sdk

    - name: Send message to Slack
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
        DOWNLOAD_URLS : ${{ env.DOWNLOAD_URLS  }}
      run: python send_to_slack.py
      shell: pwsh
